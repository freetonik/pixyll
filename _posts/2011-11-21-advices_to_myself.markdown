---
layout: post
title: "Советы мне-в-прошлом"
---
У меня очень мало опыта (суммарно программистом я проработал 13 месяцев), тем не менее, я хотел бы дать несколько советов себе-в-прошлом, ну, или иными словами всем тем, кто сейчас учится в университете и планирует стать разработчиком ПО. Ни в коей мере не претендую на мудрость или опытность. Немного подумав, я понял, что все эти советы как никогда актуальны для меня и сегодня тоже. 

Все советы автономны и их порядок не имеет значения.

<strong>Программируйте.</strong> Программируйте. Программируйте. Менеджеры той компании, где я работаю, придерживаются мнения, что резюме программиста это github. Конечно, это лишь выражение, смысл в том, что от программиста в первую очередь ожидают код, а потом – оценки, рекомендации и сертификаты. Программируйте. Опыт важнее оценок и точка. Если работодатель настаивает на обратном, то подумайте дважды, перед тем, как устраиваться к нему на работу.

<strong>Познакомьтесь с UNIX</strong><strong>.</strong> Установка Убунту и компиляция ядра – это не знакомство с UNIX. Почитайте о том инженерном и научном фундаменте который лежит в основе философии UNIX. Не обязательно становится крутым сисадмином и поднимать десяток серверов, лучше просто привыкните к принципам работы и UNIX way.

<strong>Математика – это главное.</strong> Не смотря на сугубую потребительскую направленность многих софтверных компаний, фундаментальные науки остаются фундаментом всего.

<strong>Задавайте вопросы.</strong> Естественно, если не нашели ответ в гугле. Соответственно, <strong>не задавайте вопросы</strong>, на которые может ответить гугл. Сайт <a href="http://www.google.ca/url?sa=t&amp;rct=j&amp;q=stackoverflow&amp;source=web&amp;cd=1&amp;ved=0CC8QFjAA&amp;url=http%3A%2F%2Fstackoverflow.com%2F&amp;ei=d9_JTsn4JqLx0gG7iv39Dw&amp;usg=AFQjCNERidL9Hb6OvGW93_Y6MRj3aTdMVA&amp;sig2=xTJPZs2WSyCXQPWYeWqf3w">StackOverflow</a> – ваш лучший друг. Задавайте вопросы в интернете, среди друзей, учителей, коллег. Глупый вопрос лучше незнания.

<strong>Познакомьтесь с системами контроля версий.</strong>  Хотя бы с основными – SVN, Git, Mercurial. Откройте репозитарий на своей машине и используйте его для домашних заданий и собственных проектов.

<strong>Познакомьтесь с современными инструментами разработки.</strong> Зачастую в университетах не уделяют внимания средам разработки и другим программам и утилитам, необходимым для полноценной работы. Многие IDE бесплатны, попробуйте Eclipse, NetBeans, Emacs, XCode, привыкните к принципам работы, найдите удобный для вас инструмент.

<strong>Научитесь пользоваться отладчиком.</strong> Это настолько критично, что совершенно непонятно, почему университеты уделяют этому так мало внимания.

<strong>Познакомьтесь с методологиями разработки.</strong>  Сложно им придумать применение в университетской жизни, но все же возможно. Как минимум, вы можете попробовать использовать какую-нибудь методологию в своем с другом проекте.

<strong>Познакомьтесь с шаблонами (паттернами) проектирования.</strong> Про это уже сто раз говорили, но я повторюсь. Здесь вы не отвертитесь и применить хотя бы пару основных паттернов где-нибудь просто обязаны. Достаньте свой телефон и взгляните на первую попавшуюся программу: представьте, как можно к нему применить какой-нибудь паттерн.

<strong>Программируйте в команде.</strong> Даже вдвоем вы получите неплохой опыт, особенно если примените вышестоящие советы: используйте систему контроля версий, примените какую-нибудь методологию, используйте какой-нибудь паттерн. Возможно, на этот момент вам будет казаться, что все это не имеет большого смысла и куда проще и быстрее было бы писать код не замарачиваясь, и, скорее всего, вы окажитесь правы, но не забывайте – вся учеба это скорее упражнение, чем работа.

<strong>Работайте над собственными проектами.</strong> Обратно к первому пункту – программируйте, но не ограничивайтесь домашними заданиями или упражнениями из книг. Начните свой проект.

<strong>Изучите новый для себя язык программирования.</strong> Иногда слышу нечто вроде «нас учат чему-то, я не знаю, где это будет применяться в жизни». Такие люди зачастую настолько уверены в бесполезности некоторых этих знаний, что после окончания университета работают по какой-то другой специальности потому, что их не научили программировать на популярном сегодня языке программирования. Забудьте фразу «мне это не понадобиться в будущем». Когда в детском саду учат читать, то никто не готовит профессиональных чтецов. Детей просто учат пользоваться инструментом для получения информации.

<strong>Свыкнетесь с мыслью, что кодинг – далеко не единственное, что придётся делать.</strong> Скорее всего, разработчику нужно будет работать с клиентами, искать решения проблем, бороться с инструментами и технологиями.

<strong>Настаивайте на приятной для вас обстановке.</strong> Хорошему работодателю главное – продуктивность разработчика, а если не нравится рабочее место, то сложно быть продуктивным. Это понятие включает в себя не только стол и стул, но и график работы, здание, офис, атмосферу, инструменты разработки и так далее.

<strong>Не забывайте о принципе Парето.</strong> 20 процентов усилий дают 80 процентов результата. Это, естественно, не правило, но вполне очевидная тенденция.

И самое главное: <strong>если вам не нравится программирование, то не становитесь программистом.</strong> Очень просто :-) Ничем хорошим работа без удовольствия закончиться не может.

Надеюсь, еще через пять лет я дополню этот список новыми советами, а пока можете посоветовать что-нибудь сами.
